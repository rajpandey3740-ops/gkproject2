import { isRendererWithPlugins, Plugin } from '../../renderer';
import { ComponentProcessor } from '../processor';
export class ComponentPlugin extends Plugin {
    constructor(...processors) {
        super();
        this.processors = processors;
    }
    plug(renderer) {
        super.plug(renderer);
        this.processors.forEach(p => p.plug(this.renderer()));
        /*istanbul ignore else*/
        if (isRendererWithPlugins(renderer)) {
            renderer.plugins.forEach(p => {
                if (p instanceof ComponentProcessor) {
                    this.processors.push(p);
                }
            });
        }
        this.processors = this.processors.sort((a, b) => a.priority() - b.priority());
    }
    create(tag, props, ...children) {
        const data = { tag, props: props || {}, children };
        if (this.match(data)) {
            let provision = {};
            const post = [];
            this.processors.forEach(p => p.process(_provision => provision = Object.assign(Object.assign({}, provision), _provision), _post => post.push(_post), data));
            const $ = this.createComponent(data, provision);
            post.reverse().forEach(p => p($));
            return $;
        }
        else {
            return undefined;
        }
    }
}
//# sourceMappingURL=component.plugin.js.map