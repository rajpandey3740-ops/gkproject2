import { DOMWindow } from 'jsdom';
import { PluginFactory, Renderer, RendererLike } from '../renderer';
export declare class DOMRenderer extends Renderer<Node, DOMRenderer> {
    readonly dom: DOMWindow;
    constructor(dom?: DOMWindow, ...plugins: PluginFactory<Node, RendererLike<Node>>[]);
    constructor(...plugins: PluginFactory<Node, RendererLike<Node>>[]);
    get document(): Document;
    fallbackAppend(target: any, host: Node): void;
    fallbackSetProp(node: Node, prop: string, target: any): void;
    fallbackSetContent(node: Node, target: any): void;
    fallbackFragment(): Node;
    fallbackLeaf(): Node;
    fallbackCreate(tag: any, props?: {
        [prop: string]: any;
    }): Node;
    renderOn(target: Node, host: Node): void;
    renderAfter(target: Node, ref: Node): void;
    renderBefore(target: Node, ref: Node): void;
    postRender(target: Node): () => void;
    remove(node: Node): void;
    clone(...plugins: PluginFactory<Node, RendererLike<Node>>[]): DOMRenderer;
}
