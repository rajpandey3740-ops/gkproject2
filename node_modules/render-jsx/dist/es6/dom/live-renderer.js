import { DOMRenderer } from './renderer';
import { attachLifeCycleHook, lifeCycleBind, lifeCycleClear } from './util/life-cycle';
export class LiveDOMRenderer extends DOMRenderer {
    hook(node, hook) {
        attachLifeCycleHook(hook, node);
    }
    postRender(target) {
        if (target instanceof this.dom.DocumentFragment) {
            return super.postRender(target);
        }
        else {
            return () => {
                if (this.document.contains(target)) {
                    lifeCycleBind(target);
                }
                super.postRender(target)();
            };
        }
    }
    plug(...plugins) {
        return super.plug(...plugins);
    }
    clone(...plugins) {
        return new LiveDOMRenderer(this.dom, ...plugins);
    }
    remove(node, temporary) {
        super.remove(node);
        if (!temporary) {
            lifeCycleClear(node);
        }
    }
}
//# sourceMappingURL=live-renderer.js.map