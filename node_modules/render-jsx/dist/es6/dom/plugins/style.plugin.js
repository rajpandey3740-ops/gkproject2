import { isRendererWithPlugins, Plugin } from '../../renderer';
function isSetStylePlugin(p) {
    return !!p.setStyle && typeof p.setStyle === 'function';
}
export class StylePlugin extends Plugin {
    plug(renderer) {
        super.plug(renderer);
        if (isRendererWithPlugins(renderer)) {
            this.stylePlugins = renderer.plugins.filter(isSetStylePlugin);
        }
    }
    priority() {
        return Plugin.PriorityFallback;
    }
    setProp(node, prop, target) {
        if (prop === 'style' && (target === null || target === void 0 ? void 0 : target.constructor) === Object) {
            Object.entries(target).forEach(([style, value]) => {
                if (this.stylePlugins &&
                    this.stylePlugins.some(p => isSetStylePlugin(p) &&
                        p.setStyle(node, style, value, s => this.setStyle(node, style, s)))) {
                    return;
                }
                else {
                    this.setStyle(node, style, value);
                }
            });
            return true;
        }
        return false;
    }
    format(key, value) {
        const split = key.split('.');
        return {
            key: split[0],
            val: value,
            unit: split[1] || '',
        };
    }
    setStyle(node, style, value) {
        if (style === 'transform' && typeof value === 'object') {
            node.style.transform = Object.entries(value)
                .map(e => this.format(...e))
                .map(({ key, val, unit }) => `${key}(${val}${unit})`).join(' ');
        }
        else if (style === 'transition' && typeof value === 'object') {
            node.style.transition = Object.entries(value)
                .map(e => this.format(...e))
                .map(({ key, val, unit }) => `${key} ${val}${unit}`).join(', ');
        }
        else {
            const { key, val, unit } = this.format(style, `${value}`);
            node.style[key] = `${val}${unit}`;
        }
    }
}
//# sourceMappingURL=style.plugin.js.map