{"version":3,"file":"style.plugin.js","sourceRoot":"","sources":["../../../../src/dom/plugins/style.plugin.ts"],"names":[],"mappings":"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","sourcesContent":["import { isRendererWithPlugins, Plugin, PropPlugin, RendererLike } from '../../renderer';\n\n\nexport interface SetStylePlugin<R extends RendererLike<Node>> extends Plugin<Node, R> {\n  setStyle(node: HTMLElement, style: string, target: any, set: (value: string | object) => void): boolean;\n}\n\nfunction isSetStylePlugin<R extends RendererLike<Node>>(p: Plugin<Node, R>): p is SetStylePlugin<R> {\n  return !!(p as any).setStyle && typeof (p as any).setStyle === 'function';\n}\n\nexport class StylePlugin<R extends RendererLike<Node>>\n  extends Plugin<Node, R>\n  implements PropPlugin<Node> {\n\n  private stylePlugins: SetStylePlugin<RendererLike<Node>>[] | undefined;\n\n  plug(renderer: R) {\n    super.plug(renderer);\n    if (isRendererWithPlugins(renderer)) {\n      this.stylePlugins = renderer.plugins.filter(isSetStylePlugin);\n    }\n  }\n\n  priority(): number {\n    return Plugin.PriorityFallback;\n  }\n\n  setProp(node: Node, prop: string, target: any): boolean {\n    if (prop === 'style' && target?.constructor === Object) {\n      Object.entries(target).forEach(([style, value]) => {\n        if (this.stylePlugins &&\n          this.stylePlugins.some(p =>\n            isSetStylePlugin(p) &&\n            p.setStyle(node as HTMLElement, style, value, s => this.setStyle(node as HTMLElement, style, s))\n          )\n        ) { return; }\n        else {\n          this.setStyle(node as HTMLElement, style, value as any);\n        }\n      });\n\n      return true;\n    }\n\n    return false;\n  }\n\n  format(key: string, value: string) {\n    const split = key.split('.');\n\n    return {\n      key: split[0],\n      val: value,\n      unit: split[1] || '',\n    };\n  }\n\n  setStyle(node: HTMLElement, style: string, value: string | object) {\n    if (style === 'transform' && typeof value === 'object') {\n      node.style.transform = Object.entries(value)\n        .map(e => this.format(...e))\n        .map(({key, val, unit}) => `${key}(${val}${unit})`).join(' ');\n    } else if (style === 'transition' && typeof value === 'object') {\n      node.style.transition = Object.entries(value)\n        .map(e => this.format(...e))\n        .map(({key, val, unit}) => `${key} ${val}${unit}`).join(', ');\n    } else {\n      const { key, val, unit } = this.format(style, `${value}`);\n      node.style[key as any] = `${val}${unit}`;\n    }\n  }\n}\n"]}