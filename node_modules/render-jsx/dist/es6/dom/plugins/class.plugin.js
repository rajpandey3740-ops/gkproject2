import { isRendererWithPlugins, Plugin } from '../../renderer';
function isAddClassPlugin(p) {
    return !!p.addClass && typeof p.addClass === 'function';
}
function isToggleClassPlugin(p) {
    return !!p.addClassToggle && typeof p.addClassToggle === 'function';
}
export class ClassPlugin extends Plugin {
    plug(renderer) {
        super.plug(renderer);
        if (isRendererWithPlugins(renderer)) {
            this.addClassPlugins = renderer.plugins.filter(isAddClassPlugin);
            this.toggleClassPlugins = renderer.plugins.filter(isToggleClassPlugin);
        }
    }
    priority() {
        return Plugin.PriorityFallback;
    }
    setProp(node, prop, target) {
        if (prop === 'class') {
            if (Array.isArray(target)) {
                target.forEach(cl => {
                    let prev = '';
                    const sw = (_cl) => {
                        if (node.classList.contains(prev)) {
                            node.classList.remove(prev);
                        }
                        node.classList.add(prev = _cl);
                    };
                    if (this.addClassPlugins &&
                        this.addClassPlugins.some(p => isAddClassPlugin(p) && p.addClass(node, cl, sw))) {
                        return;
                    }
                    else if (typeof cl === 'string') {
                        node.classList.add(cl);
                    }
                    else {
                        this.setToggleMap(cl, node);
                    }
                });
                return true;
            }
            else if ((target === null || target === void 0 ? void 0 : target.constructor) === Object) {
                this.setToggleMap(target, node);
                return true;
            }
        }
        return false;
    }
    setToggleMap(map, node) {
        Object.entries(map).forEach(([cl, clt]) => {
            if (this.toggleClassPlugins &&
                this.toggleClassPlugins.some(p => isToggleClassPlugin(p) && p.addClassToggle(node, cl, clt, v => {
                    if (v) {
                        node.classList.add(cl);
                    }
                    else {
                        node.classList.remove(cl);
                    }
                }))) {
                return;
            }
            else if (!!clt) {
                node.classList.add(cl);
            }
            else {
                node.classList.remove(cl);
            }
        });
    }
}
//# sourceMappingURL=class.plugin.js.map