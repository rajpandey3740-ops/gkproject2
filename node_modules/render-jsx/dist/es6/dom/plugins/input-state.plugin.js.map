{"version":3,"file":"input-state.plugin.js","sourceRoot":"","sources":["../../../../src/dom/plugins/input-state.plugin.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,MAAM,EAAc,MAAM,gBAAgB,CAAC;AAEpD,OAAO,EAAE,aAAa,EAAE,MAAM,SAAS,CAAC;AAGxC,MAAM,OAAO,gBACX,SAAQ,MAA6B;IAGrC,QAAQ;QACN,OAAO,MAAM,CAAC,gBAAgB,CAAC;IACjC,CAAC;IAED,OAAO,CAAC,IAAU,EAAE,IAAY,EAAE,MAAW;QAC3C,IAAI,IAAI,KAAK,QAAQ;eAChB,CACD,IAAI,CAAC,QAAQ,KAAK,OAAO;mBACtB,IAAI,CAAC,QAAQ,KAAK,UAAU;mBAC5B,IAAI,CAAC,QAAQ,KAAK,QAAQ,CAC9B;eACE,OAAO,MAAM,KAAK,UAAU,EAC/B;YACA,MAAM,QAAQ,GAAG,IAAI,CAAC,QAAQ,EAAE,CAAC;YACjC,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAE;gBAClB,IAAI;oBACF,IACI,IAAI,CAAC,QAAQ,KAAK,OAAO;wBACxB,IAAyB,CAAC,IAAI,KAAK,OAAO;wBAC1C,IAAyB,CAAC,IAAI,EACjC;wBACA,MAAM,CAAC,GAAG,IAAwB,CAAC;wBACnC,CAAC,CAAC,CAAC,IAAI,IAAI,QAAQ,CAAC,QAAQ,CAAC;6BAC5B,gBAAgB,CAAC,eAAe,CAAC,CAAC,IAAI,IAAI,CAAC;6BAC3C,OAAO,CAAC,KAAK,CAAC,EAAE;4BACf,IAAK,KAA0B,CAAC,IAAI,KAAK,CAAC,CAAC,IAAI,EAAE;gCAC/C,KAAK,CAAC,gBAAgB,CAAC,OAAO,EAAE,GAAG,EAAE,CAAC,MAAM,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;6BACjE;wBACH,CAAC,CAAC,CAAC;qBACJ;yBAAM;wBACL,IAAI,CAAC,gBAAgB,CAAC,OAAO,EAAE,GAAG,EAAE,CAAC,MAAM,CAAC,aAAa,CAAC,IAAW,CAAC,CAAC,CAAC,CAAC;qBAC1E;oBAED,MAAM,CAAC,aAAa,CAAC,IAAW,CAAC,CAAC,CAAC;gBACrC,CAAC;aACF,CAAC,CAAC;YAEH,OAAO,IAAI,CAAC;SACb;QAED,OAAO,KAAK,CAAC;IACf,CAAC;CACF","sourcesContent":["import { Plugin, PropPlugin } from '../../renderer';\nimport { LiveDOMRenderer } from '../live-renderer';\nimport { getInputValue } from '../util';\n\n\nexport class InputStatePlugin\n  extends Plugin<Node, LiveDOMRenderer>\n  implements PropPlugin<Node> {\n\n  priority(): number {\n    return Plugin.PriorityFallback;\n  }\n\n  setProp(node: Node, prop: string, target: any): boolean {\n    if (prop === '_state'\n      && (\n        node.nodeName === 'INPUT'\n        || node.nodeName === 'TEXTAREA'\n        || node.nodeName === 'SELECT'\n      )\n      && typeof target === 'function'\n    ) {\n      const renderer = this.renderer();\n      renderer.hook(node, {\n        bind() {\n          if (\n              node.nodeName === 'INPUT' &&\n              (node as HTMLInputElement).type === 'radio' &&\n              (node as HTMLInputElement).name\n          ) {\n            const i = node as HTMLInputElement;\n            (i.form || renderer.document)\n            .querySelectorAll(`input[name=\"${i.name}\"]`)\n            .forEach(input => {\n              if ((input as HTMLInputElement).form === i.form) {\n                input.addEventListener('input', () => target(getInputValue(i)));\n              }\n            });\n          } else {\n            node.addEventListener('input', () => target(getInputValue(node as any)));\n          }\n\n          target(getInputValue(node as any));\n        }\n      });\n\n      return true;\n    }\n\n    return false;\n  }\n}\n"]}