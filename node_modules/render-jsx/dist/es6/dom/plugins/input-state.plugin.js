import { Plugin } from '../../renderer';
import { getInputValue } from '../util';
export class InputStatePlugin extends Plugin {
    priority() {
        return Plugin.PriorityFallback;
    }
    setProp(node, prop, target) {
        if (prop === '_state'
            && (node.nodeName === 'INPUT'
                || node.nodeName === 'TEXTAREA'
                || node.nodeName === 'SELECT')
            && typeof target === 'function') {
            const renderer = this.renderer();
            renderer.hook(node, {
                bind() {
                    if (node.nodeName === 'INPUT' &&
                        node.type === 'radio' &&
                        node.name) {
                        const i = node;
                        (i.form || renderer.document)
                            .querySelectorAll(`input[name="${i.name}"]`)
                            .forEach(input => {
                            if (input.form === i.form) {
                                input.addEventListener('input', () => target(getInputValue(i)));
                            }
                        });
                    }
                    else {
                        node.addEventListener('input', () => target(getInputValue(node)));
                    }
                    target(getInputValue(node));
                }
            });
            return true;
        }
        return false;
    }
}
//# sourceMappingURL=input-state.plugin.js.map