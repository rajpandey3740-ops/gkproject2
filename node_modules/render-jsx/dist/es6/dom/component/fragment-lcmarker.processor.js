import { Ref } from '../../common';
import { ComponentProcessor } from '../../component';
import { setLifeCycleMarker } from '../util';
export class FragmentLifeCycleMarkerComponentProcessor extends ComponentProcessor {
    process(provide, post) {
        let marker = undefined;
        provide({
            setLifeCycleMarker: (node) => marker = node
        });
        post(node => {
            if (node.nodeType === node.DOCUMENT_FRAGMENT_NODE && marker) {
                if (marker instanceof Ref) {
                    setLifeCycleMarker(node, marker.$);
                }
                else {
                    setLifeCycleMarker(node, marker);
                }
            }
        });
    }
    priority() {
        return ComponentProcessor.PriorityFallback +
            (ComponentProcessor.PriorityMax - ComponentProcessor.PriorityFallback) / 100;
    }
}
//# sourceMappingURL=fragment-lcmarker.processor.js.map