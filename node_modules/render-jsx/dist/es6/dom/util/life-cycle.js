export function lifeCycleInfo(node, createIfNonExistent = false) {
    const _node = node;
    if (node.nodeType === node.DOCUMENT_FRAGMENT_NODE) {
        return fragmentLifeCycleInfo(node, createIfNonExistent);
    }
    else {
        if (_node.lifecycle) {
            return _node.lifecycle;
        }
        else if (createIfNonExistent) {
            _node.lifecycle = { bound: false };
            return _node.lifecycle;
        }
    }
}
export function fragmentLifeCycleInfo(fragment, createIfNonExistent) {
    var _a;
    let marker = getLifeCycleMarker(fragment);
    /*istanbul ignore if*/
    if (marker) {
        return lifeCycleInfo(marker, createIfNonExistent);
    }
    else if (createIfNonExistent) {
        marker = (_a = fragment.ownerDocument) === null || _a === void 0 ? void 0 : _a.createTextNode('');
        setLifeCycleMarker(fragment, marker);
        return lifeCycleInfo(marker, true);
    }
}
export function setLifeCycleMarker(fragment, marker) {
    fragment.lifecycleMarker = marker;
    if (!fragment.contains(marker)) {
        fragment.appendChild(marker);
    }
}
export function getLifeCycleMarker(fragment) {
    return fragment.lifecycleMarker;
}
export function lifeCycleClear(node) {
    const lifecycle = lifeCycleInfo(node);
    if (lifecycle) {
        /*istanbul ignore next*/
        if (lifecycle.cleared) {
            return;
        }
        lifecycle.cleared = true;
        if (lifecycle.clears) {
            for (let i = 0, clear = lifecycle.clears[i]; i < lifecycle.clears.length; clear = lifecycle.clears[++i]) {
                clear();
            }
            lifecycle.clears = undefined;
        }
    }
    const children = node.childNodes;
    for (let i = 0, child = children.item(i); i < children.length; child = children.item(++i)) {
        lifeCycleClear(child);
    }
}
export function lifeCycleBind(node) {
    const lifecycle = lifeCycleInfo(node);
    if (lifecycle) {
        /*istanbul ignore next*/
        if (lifecycle.bound) {
            return;
        }
        lifecycle.bound = true;
        if (lifecycle.binds) {
            for (let i = 0, bind = lifecycle.binds[i]; i < lifecycle.binds.length; bind = lifecycle.binds[++i]) {
                bind();
            }
        }
        lifecycle.binds = undefined;
    }
    const children = node.childNodes;
    for (let i = 0, child = children.item(i); i < children.length; child = children.item(++i)) {
        lifeCycleBind(child);
    }
}
export function attachLifeCycleHook(hook, node) {
    const lifecycle = lifeCycleInfo(node, true);
    if (hook.bind) {
        (lifecycle.binds || (lifecycle.binds = [])).push(hook.bind);
    }
    if (hook.clear) {
        (lifecycle.clears || (lifecycle.clears = [])).push(hook.clear);
    }
}
//# sourceMappingURL=life-cycle.js.map