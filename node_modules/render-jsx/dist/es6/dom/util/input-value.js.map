{"version":3,"file":"input-value.js","sourceRoot":"","sources":["../../../../src/dom/util/input-value.ts"],"names":[],"mappings":"AAAA,MAAM,UAAU,oBAAoB,CAAC,CAAoB,EAAE,KAAU;IAClE,CAAS,CAAC,MAAM,GAAG,KAAK,CAAC;AAC5B,CAAC;AAGD,MAAM,UAAU,oBAAoB,CAAC,CAAoB;IACvD,OAAQ,CAAS,CAAC,MAAM,CAAC;AAC3B,CAAC;AAED,MAAM,UAAU,aAAa,CAAC,CAA6D;IACzF,IAAI,CAAC,CAAC,QAAQ,KAAK,OAAO,EAAE;QAC1B,IAAI,CAAC,CAAC,IAAI,KAAK,QAAQ,EAAC;YACtB,OAAO,UAAU,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;SAC5B;aAAM,IAAI,CAAC,CAAC,IAAI,KAAK,UAAU,IAAI,CAAC,CAAC,IAAI,KAAK,OAAO,EAAE;YACtD,OAAQ,CAAsB,CAAC,OAAO,CAAC;SACxC;aAAM;YACL,OAAO,CAAC,CAAC,KAAK,CAAC;SAChB;KACF;SAAM,IAAI,CAAC,CAAC,QAAQ,KAAK,QAAQ,EAAE;QAClC,MAAM,CAAC,GAAG,CAAsB,CAAC;QACjC,MAAM,QAAQ,GAAG,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE,CAC1D,oBAAoB,CAAC,MAAM,CAAC;eACzB,MAAM,CAAC,KAAK;eACZ,MAAM,CAAC,IAAI,CACf,CAAC;QAEF,OAAO,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;KAC5C;SAAM;QACL,OAAO,CAAC,CAAC,KAAK,CAAC;KAChB;AACH,CAAC;AAGD,MAAM,UAAU,aAAa,CAAC,CAA6D,EAAE,KAAU;IACrG,IAAI,CAAC,CAAC,QAAQ,KAAK,OAAO,EAAE;QAC1B,IAAI,CAAC,CAAC,IAAI,KAAK,UAAU,IAAI,CAAC,CAAC,IAAI,KAAK,OAAO,EAAE;YAC9C,CAAsB,CAAC,OAAO,GAAG,CAAC,CAAC,KAAK,CAAC;SAC3C;aAAM;YACL,CAAC,CAAC,KAAK,GAAG,KAAK,CAAC;SACjB;KACF;SAAM,IAAI,CAAC,CAAC,QAAQ,KAAK,QAAQ,EAAE;QAClC,MAAM,CAAC,GAAG,CAAsB,CAAC;QACjC,MAAM,QAAQ,GAAG,KAAK,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;QAExD,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,EAAE;YACrC,MAAM,CAAC,QAAQ,GAAG,CAChB,CAAC,oBAAoB,CAAC,MAAM,CAAC,IAAI,QAAQ,CAAC,QAAQ,CAAC,oBAAoB,CAAC,MAAM,CAAC,CAAC,CAAC;mBAC9E,CAAC,MAAM,CAAC,KAAK,IAAI,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;mBACjD,CAAC,CAAC,MAAM,CAAC,KAAK,IAAI,QAAQ,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CACrD,CAAC;QACJ,CAAC,CAAC,CAAC;KACJ;SAAM;QACL,CAAC,CAAC,KAAK,GAAG,KAAK,CAAC;KACjB;AACH,CAAC","sourcesContent":["export function setOptionObjectValue($: HTMLOptionElement, value: any) {\n  ($ as any)._value = value;\n}\n\n\nexport function getOptionObjectValue($: HTMLOptionElement) {\n  return ($ as any)._value;\n}\n\nexport function getInputValue($: HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement) {\n  if ($.nodeName === 'INPUT') {\n    if ($.type === 'number'){\n      return parseFloat($.value);\n    } else if ($.type === 'checkbox' || $.type === 'radio') {\n      return ($ as HTMLInputElement).checked;\n    } else {\n      return $.value;\n    }\n  } else if ($.nodeName === 'SELECT') {\n    const s = $ as HTMLSelectElement;\n    const selected = Array.from(s.selectedOptions).map(option =>\n      getOptionObjectValue(option)\n      || option.value\n      || option.text\n    );\n\n    return s.multiple ? selected : selected[0];\n  } else {\n    return $.value;\n  }\n}\n\n\nexport function setInputValue($: HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement, value: any) {\n  if ($.nodeName === 'INPUT') {\n    if ($.type === 'checkbox' || $.type === 'radio') {\n      ($ as HTMLInputElement).checked = !!value;\n    } else {\n      $.value = value;\n    }\n  } else if ($.nodeName === 'SELECT') {\n    const s = $ as HTMLSelectElement;\n    const selected = Array.isArray(value) ? value : [value];\n\n    Array.from(s.options).forEach(option => {\n      option.selected = (\n        (getOptionObjectValue(option) && selected.includes(getOptionObjectValue(option)))\n        || (option.value && selected.includes(option.value))\n        || (!option.value && selected.includes(option.text))\n      );\n    });\n  } else {\n    $.value = value;\n  }\n}\n"]}