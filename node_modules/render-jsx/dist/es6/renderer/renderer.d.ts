import { RendererLike, ToBeRenderered } from './types';
import { Plugin, PluginFactory, RendererWithPlugins, AppendPlugin, CreatePlugin, PropPlugin, ContentPlugin, FragmentPlugin, LeafPlugin, PostCreatePlugin, PostRenderPlugin } from './plugin';
export declare abstract class Renderer<Node, R extends Renderer<Node, R>> implements RendererWithPlugins<Node> {
    readonly _factories: PluginFactory<Node, RendererLike<Node>>[];
    private _plugins;
    private readonly _appendPlugins;
    private readonly _createPlugins;
    private readonly _propPlugins;
    private readonly _contentPlugins;
    private readonly _postCreatePlugins;
    private readonly _postRenderPlugins;
    private _fragmentPlugin;
    private _leafPlugin;
    constructor(...plugins: PluginFactory<Node, RendererLike<Node>>[]);
    _buildPlugins(): this;
    get plugins(): Plugin<Node, RendererLike<Node>>[];
    get appendPlugins(): AppendPlugin<Node, RendererLike<Node>>[];
    get contentPlugins(): ContentPlugin<Node, RendererLike<Node>>[];
    get propPlugins(): PropPlugin<Node, RendererLike<Node>>[];
    get createPlugins(): CreatePlugin<Node, RendererLike<Node>>[];
    get postCreatePlugins(): PostCreatePlugin<Node, RendererLike<Node>>[];
    get postRenderPlugins(): PostRenderPlugin<Node, RendererLike<Node>>[];
    get leafPlugin(): LeafPlugin<Node, RendererLike<Node>> | undefined;
    get fragmentPlugin(): FragmentPlugin<Node, RendererLike<Node>> | undefined;
    plug(...plugins: PluginFactory<Node, RendererLike<Node>>[]): R;
    abstract fallbackAppend(target: any, host: Node): void;
    abstract fallbackSetProp(node: Node, prop: string, target: any): void;
    abstract fallbackSetContent(node: Node, target: any): void;
    abstract fallbackFragment(): Node;
    abstract fallbackLeaf(): Node;
    abstract fallbackCreate(tag: any, props?: {
        [prop: string]: any;
    }): Node;
    abstract renderOn(target: Node, host: Node): void;
    abstract renderAfter(target: Node, ref: Node): void;
    abstract renderBefore(target: Node, ref: Node): void;
    abstract remove(target: Node): void;
    abstract clone(...plugins: PluginFactory<Node, RendererLike<Node>>[]): R;
    append(target: any, host: Node): void;
    setProp(node: Node, prop: string, target: any): void;
    setContent(node: Node, target: any): void;
    get fragment(): Node;
    leaf(): Node;
    create(tag: any, props?: {
        [prop: string]: any;
    } | undefined, ...children: any[]): Node;
    render(target: Node | ((renderer: RendererLike<Node>) => Node)): ToBeRenderered<Node>;
    postRender(target: Node): () => void;
}
