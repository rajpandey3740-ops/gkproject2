{"version":3,"file":"renderer.js","sourceRoot":"","sources":["../../../src/renderer/renderer.ts"],"names":[],"mappings":"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","sourcesContent":["import { RendererLike, ToBeRenderered } from './types';\nimport { Plugin, PluginFactory,\n  isAppendPlugin, isPropPlugin, isContentPlugin, isFragmentPlugin,\n  isCreatePlugin, isPostCreatePlugin, isPostRenderPlugin, isLeafPlugin,\n  RendererWithPlugins, AppendPlugin, CreatePlugin, PropPlugin,\n  ContentPlugin, FragmentPlugin, LeafPlugin, PostCreatePlugin, PostRenderPlugin\n} from './plugin';\n\n\nexport abstract class Renderer<Node, R extends Renderer<Node, R>> implements RendererWithPlugins<Node> {\n  readonly _factories: PluginFactory<Node, RendererLike<Node>>[];\n  private _plugins: Plugin<Node, RendererLike<Node>>[];\n  private readonly _appendPlugins: AppendPlugin<Node, RendererLike<Node>>[] = [];\n  private readonly _createPlugins: CreatePlugin<Node, RendererLike<Node>>[] = [];\n  private readonly _propPlugins: PropPlugin<Node, RendererLike<Node>>[] = [];\n  private readonly _contentPlugins: ContentPlugin<Node, RendererLike<Node>>[] = [];\n  private readonly _postCreatePlugins: PostCreatePlugin<Node, RendererLike<Node>>[] = [];\n  private readonly _postRenderPlugins: PostRenderPlugin<Node, RendererLike<Node>>[] = [];\n  private _fragmentPlugin: FragmentPlugin<Node, RendererLike<Node>> | undefined;\n  private _leafPlugin: LeafPlugin<Node, RendererLike<Node>> | undefined;\n\n  constructor(...plugins: PluginFactory<Node, RendererLike<Node>>[]) {\n    this._factories = plugins;\n  }\n\n  _buildPlugins() {\n    if (!this._plugins) {\n      this._plugins = this._factories.map(f => f()).sort((a, b) => b.priority() - a.priority());\n      this._plugins.forEach(p => {\n        p.plug(this);\n        if (isAppendPlugin(p)) { this._appendPlugins.push(p); }\n        if (isContentPlugin(p)) { this._contentPlugins.push(p); }\n        if (isPropPlugin(p)) { this._propPlugins.push(p); }\n        if (isCreatePlugin(p)) { this._createPlugins.push(p); }\n        if (isPostCreatePlugin(p)) { this._postCreatePlugins.push(p); }\n        if (isPostRenderPlugin(p)) { this._postRenderPlugins.push(p); }\n        if (isLeafPlugin(p) && !this._leafPlugin) { this._leafPlugin = p; }\n        if (isFragmentPlugin(p) && !this._fragmentPlugin) { this._fragmentPlugin = p; }\n      });\n    }\n\n    return this;\n  }\n\n  get plugins() { return this._buildPlugins() && this._plugins; }\n  get appendPlugins() { return this._buildPlugins() && this._appendPlugins; }\n  get contentPlugins() { return this._buildPlugins() && this._contentPlugins; }\n  get propPlugins() { return this._buildPlugins() && this._propPlugins; }\n  get createPlugins() { return this._buildPlugins() && this._createPlugins; }\n  get postCreatePlugins() { return this._buildPlugins() && this._postCreatePlugins; }\n  get postRenderPlugins() { return this._buildPlugins() && this._postRenderPlugins; }\n  get leafPlugin() { return this._buildPlugins() && this._leafPlugin; }\n  get fragmentPlugin() { return this._buildPlugins() && this._fragmentPlugin; }\n\n  plug(...plugins: PluginFactory<Node, RendererLike<Node>>[]) {\n    return this.clone(...this._factories, ...plugins);\n  }\n\n  abstract fallbackAppend(target: any, host: Node): void;\n  abstract fallbackSetProp(node: Node, prop: string, target: any): void;\n  abstract fallbackSetContent(node: Node, target: any): void;\n  abstract fallbackFragment(): Node;\n  abstract fallbackLeaf(): Node;\n  abstract fallbackCreate(tag: any, props?: {[prop: string]: any}): Node;\n\n  abstract renderOn(target: Node, host: Node): void;\n  abstract renderAfter(target: Node, ref: Node): void;\n  abstract renderBefore(target: Node, ref: Node): void;\n  abstract remove(target: Node): void;\n\n  abstract clone(...plugins: PluginFactory<Node, RendererLike<Node>>[]): R;\n\n  append(target: any, host: Node): void {\n    if (!this.appendPlugins.some(p => p.append(target, host))) {\n      this.fallbackAppend(target, host);\n    }\n  }\n\n  setProp(node: Node, prop: string, target: any): void {\n    if (!this.propPlugins.some(p => p.setProp(node, prop, target))) {\n      this.fallbackSetProp(node, prop, target);\n    }\n  }\n\n  setContent(node: Node, target: any): void {\n    if (!this.contentPlugins.some(p => p.setContent(node, target))) {\n      this.fallbackSetContent(node, target);\n    }\n  }\n\n  get fragment(): Node {\n    const plugin = this.fragmentPlugin;\n\n    return plugin ? plugin.fragment() : this.fallbackFragment();\n  }\n\n  leaf(): Node {\n    const plugin = this.leafPlugin;\n\n    return plugin ? plugin.leaf() : this.fallbackLeaf();\n  }\n\n  create(tag: any, props?: { [prop: string]: any; } | undefined, ...children: any[]): Node {\n    let candidate: Node | undefined = undefined;\n\n    for (const p of this.createPlugins) {\n      candidate = p.create(tag, props, ...children);\n      if (candidate) {\n        break;\n      }\n    }\n\n    if (!candidate) {\n      candidate = this.fallbackCreate(tag, props);\n      if (props) {\n        Object.entries(props).forEach(([prop, target]) => this.setProp(candidate!!, prop, target));\n      }\n\n      children.forEach(child => this.append(child, candidate!!));\n    }\n\n    this.postCreatePlugins.forEach(p => p.postCreate(candidate!!));\n\n    return candidate;\n  }\n\n  render(target: Node | ((renderer: RendererLike<Node>) => Node)): ToBeRenderered<Node> {\n    if (typeof target === 'function') {\n      return this.render(target.apply(undefined, [this]));\n    }\n\n    const _this = this;\n    const post = this.postRender(target);\n\n    return {\n      after(ref: Node) {\n        _this.renderAfter(target, ref);\n        post();\n      },\n\n      before(ref: Node) {\n        _this.renderBefore(target, ref);\n        post();\n      },\n\n      on(host: Node) {\n        _this.renderOn(target, host);\n        post();\n      },\n\n      target,\n    };\n  }\n\n  postRender(target: Node) {\n    return () => this.postRenderPlugins.forEach(p => p.postRender(target));\n  }\n}\n"]}