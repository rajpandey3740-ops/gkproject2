{"version":3,"file":"plugin.js","sourceRoot":"","sources":["../../../../src/renderer/plugin/plugin.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,GAAG,EAAE,MAAM,kBAAkB,CAAC;AAIvC,MAAM,OAAgB,MAAM;IAA5B;QAImB,cAAS,GAAG,GAAG,EAAY,CAAC;IAW/C,CAAC;IATC,IAAI,CAAC,QAAkB;QACrB,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;IACnC,CAAC;IAED,QAAQ;QACN,OAAO,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;IAC1B,CAAC;;AAXa,kBAAW,GAAG,CAAC,CAAC;AAChB,uBAAgB,GAAG,CAAC,CAAC;AAwBrC,MAAM,UAAU,qBAAqB,CAAO,QAA4B;IAEtE,OAAO,CAAC,CAAE,QAAgB,CAAC,OAAO,IAAI,KAAK,CAAC,OAAO,CAAE,QAAgB,CAAC,OAAO,CAAC,CAAC;AACjF,CAAC","sourcesContent":["import { isArray } from 'util';\nimport { ref } from '../../common/ref';\nimport { RendererLike } from '../types';\n\n\nexport abstract class Plugin<Node, Renderer extends RendererLike<Node> = RendererLike<Node>> {\n  public static PriorityMax = 1;\n  public static PriorityFallback = 0;\n\n  private readonly _renderer = ref<Renderer>();\n\n  plug(renderer: Renderer) {\n    this._renderer.resolve(renderer);\n  }\n\n  renderer() {\n    return this._renderer.$;\n  }\n\n  abstract priority(): number;\n}\n\n\nexport type PluginFactory<Node, Renderer extends RendererLike<Node> = RendererLike<Node>>\n   = () => Plugin<Node, Renderer>;\n\n\nexport interface RendererWithPlugins<Node> extends RendererLike<Node> {\n  plugins: Plugin<Node, RendererLike<Node>>[];\n}\n\nexport function isRendererWithPlugins<Node>(renderer: RendererLike<Node>):\n  renderer is RendererWithPlugins<Node> {\n  return !!(renderer as any).plugins && Array.isArray((renderer as any).plugins);\n}\n"]}