"use strict";
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Renderer = void 0;
var plugin_1 = require("./plugin");
var Renderer = /** @class */ (function () {
    function Renderer() {
        var plugins = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            plugins[_i] = arguments[_i];
        }
        this._appendPlugins = [];
        this._createPlugins = [];
        this._propPlugins = [];
        this._contentPlugins = [];
        this._postCreatePlugins = [];
        this._postRenderPlugins = [];
        this._factories = plugins;
    }
    Renderer.prototype._buildPlugins = function () {
        var _this_1 = this;
        if (!this._plugins) {
            this._plugins = this._factories.map(function (f) { return f(); }).sort(function (a, b) { return b.priority() - a.priority(); });
            this._plugins.forEach(function (p) {
                p.plug(_this_1);
                if (plugin_1.isAppendPlugin(p)) {
                    _this_1._appendPlugins.push(p);
                }
                if (plugin_1.isContentPlugin(p)) {
                    _this_1._contentPlugins.push(p);
                }
                if (plugin_1.isPropPlugin(p)) {
                    _this_1._propPlugins.push(p);
                }
                if (plugin_1.isCreatePlugin(p)) {
                    _this_1._createPlugins.push(p);
                }
                if (plugin_1.isPostCreatePlugin(p)) {
                    _this_1._postCreatePlugins.push(p);
                }
                if (plugin_1.isPostRenderPlugin(p)) {
                    _this_1._postRenderPlugins.push(p);
                }
                if (plugin_1.isLeafPlugin(p) && !_this_1._leafPlugin) {
                    _this_1._leafPlugin = p;
                }
                if (plugin_1.isFragmentPlugin(p) && !_this_1._fragmentPlugin) {
                    _this_1._fragmentPlugin = p;
                }
            });
        }
        return this;
    };
    Object.defineProperty(Renderer.prototype, "plugins", {
        get: function () { return this._buildPlugins() && this._plugins; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Renderer.prototype, "appendPlugins", {
        get: function () { return this._buildPlugins() && this._appendPlugins; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Renderer.prototype, "contentPlugins", {
        get: function () { return this._buildPlugins() && this._contentPlugins; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Renderer.prototype, "propPlugins", {
        get: function () { return this._buildPlugins() && this._propPlugins; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Renderer.prototype, "createPlugins", {
        get: function () { return this._buildPlugins() && this._createPlugins; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Renderer.prototype, "postCreatePlugins", {
        get: function () { return this._buildPlugins() && this._postCreatePlugins; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Renderer.prototype, "postRenderPlugins", {
        get: function () { return this._buildPlugins() && this._postRenderPlugins; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Renderer.prototype, "leafPlugin", {
        get: function () { return this._buildPlugins() && this._leafPlugin; },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(Renderer.prototype, "fragmentPlugin", {
        get: function () { return this._buildPlugins() && this._fragmentPlugin; },
        enumerable: false,
        configurable: true
    });
    Renderer.prototype.plug = function () {
        var plugins = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            plugins[_i] = arguments[_i];
        }
        return this.clone.apply(this, __spreadArrays(this._factories, plugins));
    };
    Renderer.prototype.append = function (target, host) {
        if (!this.appendPlugins.some(function (p) { return p.append(target, host); })) {
            this.fallbackAppend(target, host);
        }
    };
    Renderer.prototype.setProp = function (node, prop, target) {
        if (!this.propPlugins.some(function (p) { return p.setProp(node, prop, target); })) {
            this.fallbackSetProp(node, prop, target);
        }
    };
    Renderer.prototype.setContent = function (node, target) {
        if (!this.contentPlugins.some(function (p) { return p.setContent(node, target); })) {
            this.fallbackSetContent(node, target);
        }
    };
    Object.defineProperty(Renderer.prototype, "fragment", {
        get: function () {
            var plugin = this.fragmentPlugin;
            return plugin ? plugin.fragment() : this.fallbackFragment();
        },
        enumerable: false,
        configurable: true
    });
    Renderer.prototype.leaf = function () {
        var plugin = this.leafPlugin;
        return plugin ? plugin.leaf() : this.fallbackLeaf();
    };
    Renderer.prototype.create = function (tag, props) {
        var _this_1 = this;
        var children = [];
        for (var _i = 2; _i < arguments.length; _i++) {
            children[_i - 2] = arguments[_i];
        }
        var candidate = undefined;
        for (var _a = 0, _b = this.createPlugins; _a < _b.length; _a++) {
            var p = _b[_a];
            candidate = p.create.apply(p, __spreadArrays([tag, props], children));
            if (candidate) {
                break;
            }
        }
        if (!candidate) {
            candidate = this.fallbackCreate(tag, props);
            if (props) {
                Object.entries(props).forEach(function (_a) {
                    var prop = _a[0], target = _a[1];
                    return _this_1.setProp(candidate, prop, target);
                });
            }
            children.forEach(function (child) { return _this_1.append(child, candidate); });
        }
        this.postCreatePlugins.forEach(function (p) { return p.postCreate(candidate); });
        return candidate;
    };
    Renderer.prototype.render = function (target) {
        if (typeof target === 'function') {
            return this.render(target.apply(undefined, [this]));
        }
        var _this = this;
        var post = this.postRender(target);
        return {
            after: function (ref) {
                _this.renderAfter(target, ref);
                post();
            },
            before: function (ref) {
                _this.renderBefore(target, ref);
                post();
            },
            on: function (host) {
                _this.renderOn(target, host);
                post();
            },
            target: target,
        };
    };
    Renderer.prototype.postRender = function (target) {
        var _this_1 = this;
        return function () { return _this_1.postRenderPlugins.forEach(function (p) { return p.postRender(target); }); };
    };
    return Renderer;
}());
exports.Renderer = Renderer;
//# sourceMappingURL=renderer.js.map