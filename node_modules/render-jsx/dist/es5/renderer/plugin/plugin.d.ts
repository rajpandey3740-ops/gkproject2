import { RendererLike } from '../types';
export declare abstract class Plugin<Node, Renderer extends RendererLike<Node> = RendererLike<Node>> {
    static PriorityMax: number;
    static PriorityFallback: number;
    private readonly _renderer;
    plug(renderer: Renderer): void;
    renderer(): Renderer;
    abstract priority(): number;
}
export declare type PluginFactory<Node, Renderer extends RendererLike<Node> = RendererLike<Node>> = () => Plugin<Node, Renderer>;
export interface RendererWithPlugins<Node> extends RendererLike<Node> {
    plugins: Plugin<Node, RendererLike<Node>>[];
}
export declare function isRendererWithPlugins<Node>(renderer: RendererLike<Node>): renderer is RendererWithPlugins<Node>;
