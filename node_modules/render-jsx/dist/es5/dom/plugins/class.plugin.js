"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.ClassPlugin = void 0;
var renderer_1 = require("../../renderer");
function isAddClassPlugin(p) {
    return !!p.addClass && typeof p.addClass === 'function';
}
function isToggleClassPlugin(p) {
    return !!p.addClassToggle && typeof p.addClassToggle === 'function';
}
var ClassPlugin = /** @class */ (function (_super) {
    __extends(ClassPlugin, _super);
    function ClassPlugin() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ClassPlugin.prototype.plug = function (renderer) {
        _super.prototype.plug.call(this, renderer);
        if (renderer_1.isRendererWithPlugins(renderer)) {
            this.addClassPlugins = renderer.plugins.filter(isAddClassPlugin);
            this.toggleClassPlugins = renderer.plugins.filter(isToggleClassPlugin);
        }
    };
    ClassPlugin.prototype.priority = function () {
        return renderer_1.Plugin.PriorityFallback;
    };
    ClassPlugin.prototype.setProp = function (node, prop, target) {
        var _this = this;
        if (prop === 'class') {
            if (Array.isArray(target)) {
                target.forEach(function (cl) {
                    var prev = '';
                    var sw = function (_cl) {
                        if (node.classList.contains(prev)) {
                            node.classList.remove(prev);
                        }
                        node.classList.add(prev = _cl);
                    };
                    if (_this.addClassPlugins &&
                        _this.addClassPlugins.some(function (p) { return isAddClassPlugin(p) && p.addClass(node, cl, sw); })) {
                        return;
                    }
                    else if (typeof cl === 'string') {
                        node.classList.add(cl);
                    }
                    else {
                        _this.setToggleMap(cl, node);
                    }
                });
                return true;
            }
            else if ((target === null || target === void 0 ? void 0 : target.constructor) === Object) {
                this.setToggleMap(target, node);
                return true;
            }
        }
        return false;
    };
    ClassPlugin.prototype.setToggleMap = function (map, node) {
        var _this = this;
        Object.entries(map).forEach(function (_a) {
            var cl = _a[0], clt = _a[1];
            if (_this.toggleClassPlugins &&
                _this.toggleClassPlugins.some(function (p) { return isToggleClassPlugin(p) && p.addClassToggle(node, cl, clt, function (v) {
                    if (v) {
                        node.classList.add(cl);
                    }
                    else {
                        node.classList.remove(cl);
                    }
                }); })) {
                return;
            }
            else if (!!clt) {
                node.classList.add(cl);
            }
            else {
                node.classList.remove(cl);
            }
        });
    };
    return ClassPlugin;
}(renderer_1.Plugin));
exports.ClassPlugin = ClassPlugin;
//# sourceMappingURL=class.plugin.js.map