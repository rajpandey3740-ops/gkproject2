"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.InputStatePlugin = void 0;
var renderer_1 = require("../../renderer");
var util_1 = require("../util");
var InputStatePlugin = /** @class */ (function (_super) {
    __extends(InputStatePlugin, _super);
    function InputStatePlugin() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    InputStatePlugin.prototype.priority = function () {
        return renderer_1.Plugin.PriorityFallback;
    };
    InputStatePlugin.prototype.setProp = function (node, prop, target) {
        if (prop === '_state'
            && (node.nodeName === 'INPUT'
                || node.nodeName === 'TEXTAREA'
                || node.nodeName === 'SELECT')
            && typeof target === 'function') {
            var renderer_2 = this.renderer();
            renderer_2.hook(node, {
                bind: function () {
                    if (node.nodeName === 'INPUT' &&
                        node.type === 'radio' &&
                        node.name) {
                        var i_1 = node;
                        (i_1.form || renderer_2.document)
                            .querySelectorAll("input[name=\"" + i_1.name + "\"]")
                            .forEach(function (input) {
                            if (input.form === i_1.form) {
                                input.addEventListener('input', function () { return target(util_1.getInputValue(i_1)); });
                            }
                        });
                    }
                    else {
                        node.addEventListener('input', function () { return target(util_1.getInputValue(node)); });
                    }
                    target(util_1.getInputValue(node));
                }
            });
            return true;
        }
        return false;
    };
    return InputStatePlugin;
}(renderer_1.Plugin));
exports.InputStatePlugin = InputStatePlugin;
//# sourceMappingURL=input-state.plugin.js.map