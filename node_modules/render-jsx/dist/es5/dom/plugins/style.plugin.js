"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.StylePlugin = void 0;
var renderer_1 = require("../../renderer");
function isSetStylePlugin(p) {
    return !!p.setStyle && typeof p.setStyle === 'function';
}
var StylePlugin = /** @class */ (function (_super) {
    __extends(StylePlugin, _super);
    function StylePlugin() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    StylePlugin.prototype.plug = function (renderer) {
        _super.prototype.plug.call(this, renderer);
        if (renderer_1.isRendererWithPlugins(renderer)) {
            this.stylePlugins = renderer.plugins.filter(isSetStylePlugin);
        }
    };
    StylePlugin.prototype.priority = function () {
        return renderer_1.Plugin.PriorityFallback;
    };
    StylePlugin.prototype.setProp = function (node, prop, target) {
        var _this = this;
        if (prop === 'style' && (target === null || target === void 0 ? void 0 : target.constructor) === Object) {
            Object.entries(target).forEach(function (_a) {
                var style = _a[0], value = _a[1];
                if (_this.stylePlugins &&
                    _this.stylePlugins.some(function (p) {
                        return isSetStylePlugin(p) &&
                            p.setStyle(node, style, value, function (s) { return _this.setStyle(node, style, s); });
                    })) {
                    return;
                }
                else {
                    _this.setStyle(node, style, value);
                }
            });
            return true;
        }
        return false;
    };
    StylePlugin.prototype.format = function (key, value) {
        var split = key.split('.');
        return {
            key: split[0],
            val: value,
            unit: split[1] || '',
        };
    };
    StylePlugin.prototype.setStyle = function (node, style, value) {
        var _this = this;
        if (style === 'transform' && typeof value === 'object') {
            node.style.transform = Object.entries(value)
                .map(function (e) { return _this.format.apply(_this, e); })
                .map(function (_a) {
                var key = _a.key, val = _a.val, unit = _a.unit;
                return key + "(" + val + unit + ")";
            }).join(' ');
        }
        else if (style === 'transition' && typeof value === 'object') {
            node.style.transition = Object.entries(value)
                .map(function (e) { return _this.format.apply(_this, e); })
                .map(function (_a) {
                var key = _a.key, val = _a.val, unit = _a.unit;
                return key + " " + val + unit;
            }).join(', ');
        }
        else {
            var _a = this.format(style, "" + value), key = _a.key, val = _a.val, unit = _a.unit;
            node.style[key] = "" + val + unit;
        }
    };
    return StylePlugin;
}(renderer_1.Plugin));
exports.StylePlugin = StylePlugin;
//# sourceMappingURL=style.plugin.js.map