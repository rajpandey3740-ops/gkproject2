"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __spreadArrays = (this && this.__spreadArrays) || function () {
    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
    for (var r = Array(s), k = 0, i = 0; i < il; i++)
        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
            r[k] = a[j];
    return r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DOMRenderer = void 0;
var renderer_1 = require("../renderer");
var errors_1 = require("./errors");
var DOMRenderer = /** @class */ (function (_super) {
    __extends(DOMRenderer, _super);
    function DOMRenderer(dom) {
        if (dom === void 0) { dom = window; }
        var plugins = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            plugins[_i - 1] = arguments[_i];
        }
        var _this = _super.apply(this, (typeof dom === 'function' ? __spreadArrays([dom], plugins) : plugins)) || this;
        if (!dom || typeof dom === 'function') {
            _this.dom = window;
        }
        else {
            _this.dom = dom;
        }
        return _this;
    }
    Object.defineProperty(DOMRenderer.prototype, "document", {
        get: function () { return this.dom.document; },
        enumerable: false,
        configurable: true
    });
    DOMRenderer.prototype.fallbackAppend = function (target, host) {
        var _this = this;
        if (target instanceof this.dom.Node) {
            host.appendChild(target);
        }
        else if (Array.isArray(target)) {
            target.forEach(function (child) { return _this.append(child, host); });
        }
        else {
            host.appendChild(this.document.createTextNode("" + target));
        }
    };
    DOMRenderer.prototype.fallbackSetProp = function (node, prop, target) {
        if (node instanceof this.dom.HTMLElement) {
            if (typeof target === 'boolean') {
                if (target) {
                    node.setAttribute(prop, '');
                }
                else {
                    node.removeAttribute(prop);
                }
            }
            else {
                node.setAttribute(prop, "" + target);
            }
        }
    };
    DOMRenderer.prototype.fallbackSetContent = function (node, target) {
        if (node instanceof this.dom.HTMLElement) {
            node.innerHTML = "" + target;
        }
        else {
            node.textContent = "" + target;
        }
    };
    DOMRenderer.prototype.fallbackFragment = function () {
        return this.document.createDocumentFragment();
    };
    DOMRenderer.prototype.fallbackLeaf = function () {
        return this.document.createTextNode('');
    };
    DOMRenderer.prototype.fallbackCreate = function (tag, props) {
        if (!(tag instanceof this.dom.Node || typeof tag === 'string')) {
            throw new errors_1.UnrecognizedTagError(tag);
        }
        if (tag instanceof this.dom.Node) {
            return tag;
        }
        else if (props && props.xmlns) {
            return this.document.createElementNS("" + props.xmlns, tag);
        }
        else {
            return this.document.createElement(tag);
        }
    };
    DOMRenderer.prototype.renderOn = function (target, host) {
        host.appendChild(target);
    };
    DOMRenderer.prototype.renderAfter = function (target, ref) {
        if (ref.parentNode) {
            ref.parentNode.insertBefore(target, ref.nextSibling);
        }
    };
    DOMRenderer.prototype.renderBefore = function (target, ref) {
        if (ref.parentNode) {
            ref.parentNode.insertBefore(target, ref);
        }
    };
    DOMRenderer.prototype.postRender = function (target) {
        var _this = this;
        var post = this.plugins.filter(renderer_1.isPostRenderPlugin);
        if (target instanceof this.dom.DocumentFragment) {
            var children_1 = Array.from(target.childNodes);
            return function () { return children_1.forEach(function (child) { _this.postRender(child)(); }); };
        }
        else {
            return function () { return post.forEach(function (p) { return p.postRender(target); }); };
        }
    };
    DOMRenderer.prototype.remove = function (node) {
        var _a;
        (_a = node.parentNode) === null || _a === void 0 ? void 0 : _a.removeChild(node);
    };
    DOMRenderer.prototype.clone = function () {
        var plugins = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            plugins[_i] = arguments[_i];
        }
        return new (DOMRenderer.bind.apply(DOMRenderer, __spreadArrays([void 0, this.dom], plugins)))();
    };
    return DOMRenderer;
}(renderer_1.Renderer));
exports.DOMRenderer = DOMRenderer;
//# sourceMappingURL=renderer.js.map