import { CreatePlugin, Plugin, RendererLike } from '../../renderer';
import { ComponentProcessor } from '../processor';
import { ComponentData, ComponentProvision } from '../types';
export declare abstract class ComponentPlugin<Node, Renderer extends RendererLike<Node>> extends Plugin<Node, Renderer> implements CreatePlugin<Node, Renderer> {
    processors: ComponentProcessor<Node, Renderer>[];
    constructor(...processors: ComponentProcessor<Node, Renderer>[]);
    plug(renderer: Renderer): void;
    create(tag: any, props?: {
        [prop: string]: any;
    }, ...children: any[]): Node | undefined;
    abstract createComponent(component: ComponentData, provision: ComponentProvision): Node;
    abstract match(component: ComponentData): boolean;
}
