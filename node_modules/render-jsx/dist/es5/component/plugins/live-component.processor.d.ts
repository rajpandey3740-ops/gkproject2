import { ComponentPostProcessor, ComponentProvision } from '../types';
import { ComponentProcessor } from '../processor';
import { LiveRendererLike } from '../../renderer';
export interface LiveComponentThis {
    onBind: (fn: () => void) => void;
    onClear: (fn: () => void) => void;
}
export declare class LiveComponentProcessor<Node> extends ComponentProcessor<Node, LiveRendererLike<Node>> {
    process(provide: (provision: ComponentProvision) => void, post: (processor: ComponentPostProcessor<Node>) => void): void;
    priority(): number;
}
